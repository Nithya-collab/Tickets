generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Engagement {
  id             Int      @id @default(autoincrement())
  start_time     DateTime
  end_time       DateTime
  role           String
  coordinator_id Int
  user           User     @relation(fields: [coordinator_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("engagements")
}

model Event {
  id           Int          @id @default(autoincrement())
  name         String
  description  String
  start_time   DateTime
  end_time     DateTime
  organizer_id Int
  venue_id     Int
  created_at   DateTime?
  updated_at   DateTime?
  user         User         @relation(fields: [organizer_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  venue        Venue        @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  tasks        Task[]
  ticketTypes  TicketType[]

  @@map("events")
}

model failed_jobs {
  id         Int      @id @default(autoincrement())
  uuid       String   @unique(map: "failed_jobs_uuid_unique")
  connection String
  queue      String
  payload    String
  exception  String
  failed_at  DateTime @default(now())
}

model migrations {
  id        Int    @id @default(autoincrement())
  migration String
  batch     Int
}

model Organization {
  id         Int       @id @default(autoincrement())
  name       String
  inception  DateTime
  created_at DateTime?
  updated_at DateTime?

  @@map("organizations")
}

model password_reset_tokens {
  email      String    @id
  token      String
  created_at DateTime?
}

model PermissionRole {
  id            Int        @id @default(autoincrement())
  permission_id Int
  role_id       Int
  created_at    DateTime?
  updated_at    DateTime?
  roles         Role       @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  permissions   Permission @relation(fields: [permission_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("permission_role")
}

model Permission {
  id              Int              @id @default(autoincrement())
  title           String
  created_at      DateTime?
  updated_at      DateTime?
  permission_role PermissionRole[]

  @@map("permissions")
}

model personal_access_tokens {
  id             Int       @id @default(autoincrement())
  tokenable_type String
  tokenable_id   Int
  name           String
  token          String    @unique(map: "personal_access_tokens_token_unique")
  abilities      String?
  last_used_at   DateTime?
  expires_at     DateTime?
  created_at     DateTime?
  updated_at     DateTime?

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model RoleUser {
  id         Int       @id @default(autoincrement())
  role_id    Int
  user_id    Int
  created_at DateTime?
  updated_at DateTime?
  users      User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  roles      Role      @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("role_user")
}

model Role {
  id          Int              @id @default(autoincrement())
  title       String           @unique(map: "roles_title_unique")
  created_at  DateTime?        @default(now())
  updated_at  DateTime?        @default(now())
  permissions PermissionRole[]
  roles       RoleUser[]

  @@map("roles")
}

model Session {
  id            String    @id
  userId        Int?      @map("user_id")
  ip_address    String?
  user_agent    String?
  payload       String?
  last_activity Int?
  expiresAt     DateTime? @map("expires_at")
  user          User?     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([userId], map: "sessions_user_id_index")
  @@map("sessions")
}

model team_invitations {
  id         Int       @id @default(autoincrement())
  team_id    Int
  email      String
  role       String?
  created_at DateTime?
  updated_at DateTime?
  teams      teams     @relation(fields: [team_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@unique([team_id, email], map: "team_invitations_team_id_email_unique")
}

model team_user {
  id         Int       @id @default(autoincrement())
  team_id    Int
  user_id    Int
  role       String?
  created_at DateTime?
  updated_at DateTime?

  @@unique([team_id, user_id], map: "team_user_team_id_user_id_unique")
}

model teams {
  id               Int                       @id @default(autoincrement())
  user_id          Int
  name             String
  personal_team    Unsupported("tinyint(1)")
  created_at       DateTime?
  updated_at       DateTime?
  team_invitations team_invitations[]

  @@index([user_id], map: "teams_user_id_index")
}

model User {
  id                        Int          @id @default(autoincrement())
  name                      String
  email                     String       @unique(map: "users_email_unique")
  email_verified_at         DateTime?
  password                  String
  remember_token            String?
  current_team_id           Int?
  profile_photo_path        String?
  created_at                DateTime?    @default(now())
  updated_at                DateTime?    @default(now())
  two_factor_secret         String?
  two_factor_recovery_codes String?
  two_factor_confirmed_at   DateTime?
  type                      String?      @default("user")
  engagements               Engagement[]
  events                    Event[]
  roles                     RoleUser[]
  sessions                  Session[]
  tasks                     Task[]

  @@map("users")
}

model Venue {
  id          Int     @id @default(autoincrement())
  name        String
  description String
  events      Event[]
  spaces      Space[]

  @@map("venues")
}

model Assignment {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  created_at  DateTime?
  updated_at  DateTime?

  @@map("assignments")
}

model Seat {
  id       Int    @id @default(autoincrement())
  position String
  area     String
  space_id Int
  spaces   Space  @relation(fields: [space_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("seats")
}

model Space {
  id            Int    @id @default(autoincrement())
  name          String
  description   String
  seat_capacity Int
  venue_id      Int
  seats         Seat[]
  venue         Venue  @relation(fields: [venue_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("spaces")
}

model Task {
  id          Int       @id @default(autoincrement())
  name        String
  description String
  event_id    Int?
  user_id     Int
  created_at  DateTime?
  updated_at  DateTime?
  user        User      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  event       Event?    @relation(fields: [event_id], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@map("tasks")
}

model TicketType {
  id          Int      @id @default(autoincrement())
  name        String
  description String
  price       Decimal  @default(0.00)
  eventId     Int      @map("event_id")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")
  tickets     Ticket[]
  event       Event    @relation(fields: [eventId], references: [id])

  @@map("ticket_types")
}

model Ticket {
  id           Int        @id @default(autoincrement())
  serialNumber String     @default(uuid())
  ticketTypeId Int        @map("ticket_type_id")
  ticketType   TicketType @relation(fields: [ticketTypeId], references: [id])

  @@map("tickets")
}
